{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/InputField/InputField.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","InputField","value","onChange","isRequired","isValid","type","name","classNames","invalidInput","placeholder","toUpperCase","slice","NewMovie","state","isTitleValid","isImgUrlValid","isImdbUrlValid","isImdbIdValid","isFormValid","makeInputValid","input","setState","makeInputInValid","addInput","event","target","findInvalidInputs","clearForm","onAdd","this","props","onSubmit","preventDefault","disabled","Component","App","moviesFromServer","addMovie","prevState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e79cbeb7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport './inputfield.scss';\n\nexport const InputField = ({ title, value, onChange, isRequired, isValid }) => (\n  <>\n    <input\n      type=\"text\"\n      name={title}\n      className={classNames('input', { invalidInput: !isValid && isRequired })}\n      // eslint-disable-next-line max-len\n      placeholder={`${title[0].toUpperCase()}${title.slice(1)}${isRequired ? '*' : ''}`}\n      value={value}\n      onChange={onChange}\n    />\n    {!isValid && isRequired && (\n      <p>\n        {`Please enter the ${title}`}\n      </p>\n    )}\n  </>\n);\n\nInputField.propTypes = {\n  title: propTypes.string.isRequired,\n  value: propTypes.string.isRequired,\n  onChange: propTypes.func.isRequired,\n  isRequired: propTypes.bool.isRequired,\n  isValid: propTypes.bool.isRequired,\n};\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\n\nimport { InputField } from '../InputField';\n\nimport './NewMovie.scss';\n\nexport class NewMovie extends Component {\n  state = {\n    title: '',\n    isTitleValid: true,\n    description: '',\n    imgUrl: '',\n    isImgUrlValid: true,\n    imdbUrl: '',\n    isImdbUrlValid: true,\n    imdbId: '',\n    isImdbIdValid: true,\n    isFormValid: true,\n  };\n\n  makeInputValid = (input) => {\n    this.setState({\n      [input]: true,\n    });\n  }\n\n  makeInputInValid = (input) => {\n    this.setState({\n      [input]: false,\n    });\n  }\n\n  addInput = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n\n    switch (event.target.name) {\n      case 'title':\n        this.makeInputValid('isTitleValid');\n        break;\n      case 'imgUrl':\n        this.makeInputValid('isImgUrlValid');\n        break;\n      case 'imdbUrl':\n        this.makeInputValid('isImdbUrlValid');\n        break;\n      case 'imdbId':\n        this.makeInputValid('isImdbIdValid');\n        break;\n      default:\n        break;\n    }\n  }\n\n  findInvalidInputs = () => {\n    if (this.state.title === '') {\n      this.makeInputInValid('isTitleValid');\n    }\n\n    if (this.state.imgUrl === '') {\n      this.makeInputInValid('isImgUrlValid');\n    }\n\n    if (this.state.imdbUrl === '') {\n      this.makeInputInValid('isImdbUrlValid');\n    }\n\n    if (this.state.imdbId === '') {\n      this.makeInputInValid('isImdbIdValid');\n    }\n  }\n\n  clearForm = () => {\n    this.setState({\n      title: '',\n      isTitleValid: true,\n      description: '',\n      imgUrl: '',\n      isImgUrlValid: true,\n      imdbUrl: '',\n      isImdbUrlValid: true,\n      imdbId: '',\n      isImdbIdValid: true,\n    });\n  }\n\n  render() {\n    const { onAdd } = this.props;\n    const {\n      title,\n      isTitleValid,\n      description,\n      imdbUrl,\n      isImgUrlValid,\n      imgUrl,\n      isImdbUrlValid,\n      imdbId,\n      isImdbIdValid,\n    } = this.state;\n\n    return (\n      <form\n        className=\"form\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          if (title && imdbUrl && imgUrl && imdbId) {\n            onAdd(this.state);\n            this.clearForm();\n          } else {\n            this.findInvalidInputs();\n          }\n        }}\n      >\n        <InputField\n          title=\"title\"\n          value={title}\n          onChange={this.addInput}\n          isRequired\n          isValid={this.state.isTitleValid}\n        />\n        <InputField\n          title=\"description\"\n          value={description}\n          onChange={this.addInput}\n        />\n        <InputField\n          title=\"imgUrl\"\n          value={imgUrl}\n          onChange={this.addInput}\n          isRequired\n          isValid={this.state.isImgUrlValid}\n        />\n        <InputField\n          title=\"imdbUrl\"\n          value={imdbUrl}\n          onChange={this.addInput}\n          isRequired\n          isValid={this.state.isImdbUrlValid}\n        />\n        <InputField\n          title=\"imdbId\"\n          value={imdbId}\n          onChange={this.addInput}\n          isRequired\n          isValid={this.state.isImdbIdValid}\n        />\n        <button\n          type=\"submit\"\n          className=\"button\"\n          disabled={!isTitleValid\n            || !isImgUrlValid\n            || !isImdbUrlValid\n            || !isImdbIdValid}\n        >\n          Add\n        </button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  onAdd: propTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(prevState => ({\n      movies: [...prevState.movies, movie],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie onAdd={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}